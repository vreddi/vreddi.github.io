{"version":3,"sources":["assets/locales sync /^/.*/.json$","components/SocialPanel/SocialPanel.js","components/SocialBadge/SocialBadge.js","components/Name/Name.js","components/Header/Header.jsx","components/StyledFormattedMessage/StyledFormattedMessage.js","components/Splash/Splash.js","App.js","serviceWorker.js","index.js"],"names":["map","./en-US.json","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","SocialPanel","props","react_default","a","createElement","className","children","SocialBadge","target","rel","href","link","role","index_es","icon","faIcon","color","title","size","Name","Header","components_Name_Name","components_SocialPanel_SocialPanel","components_SocialBadge_SocialBadge","faGithub","faInstagram","faTwitter","StyledFormattedMessage","message","description","defaultMessage","values","Splash","components_StyledFormattedMessage_StyledFormattedMessage","App","components_Header_Header","components_Splash_Splash","Component","Boolean","window","location","hostname","match","resources","require","concat","console","log","ReactDOM","render","provider","locale","messages","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94804deb.chunk.js","sourcesContent":["var map = {\n\t\"./en-US.json\": 53\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 52;","import React from 'react';\nimport './SocialPanel.css';\n\nconst SocialPanel = (props) => (\n  <div className=\"social-panel\">\n    {props.children}\n  </div>\n);\n\nexport default SocialPanel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport './SocialBadge.css';\n\nconst SocialBadge = (props) => (\n  <a target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    href={props.link}\n    className=\"social-badge\"\n    role=\"button\"\n  >\n    <FontAwesomeIcon\n      icon={props.faIcon}\n      color={props.color}\n      title={props.title}\n      size={props.size}\n    />\n  </a>\n);\n\n\nSocialBadge.propTypes = {\n  /**\n   * Class name of the Font-Awesome icon.\n   */\n  faIcon: PropTypes.object,\n\n  /**\n   * Color of the Font-Awesome icon.\n   */\n  color: PropTypes.string,\n\n  /**\n   * On hover title of the Fone-Awesome icon.\n   */\n  title: PropTypes.string,\n\n  /**\n   * Fize of the Font-Awesome icon.\n   */\n  size: PropTypes.string,\n\n  /**\n   * On click re-direction link\n   */\n  link: PropTypes.string,\n};\n\nexport default SocialBadge;\n","import React from 'react';\nimport './Name.css';\n\nconst Name = () => (\n  <div className=\"name\">\n    <div className=\"name-icon\">\n      V\n    </div>\n    <div className=\"name-title\">\n      ISHRUT REDDI\n    </div>\n  </div>\n);\n\nexport default Name;\n","import React from 'react';\nimport SocialPanel from '../SocialPanel/SocialPanel';\nimport SocialBadge from '../SocialBadge/SocialBadge';\nimport Name from '../Name/Name';\n\nimport { faGithub, faInstagram, faTwitter } from '@fortawesome/free-brands-svg-icons'\n\nimport './Header.css';\n\nconst Header = (props) => (\n  <div className=\"header\">\n    <Name />\n\n    <SocialPanel>\n      <SocialBadge\n        faIcon={faGithub}\n        color=\"#8e9092\"\n        title=\"Github\"\n        size=\"2x\"\n        link=\"https://github.com/vreddi\"\n      />\n      <SocialBadge\n        faIcon={faInstagram}\n        color=\"#8e9092\"\n        title=\"Instagram\"\n        size=\"2x\"\n        link=\"https://instagram.com/vishrutreddi\"\n      />\n      <SocialBadge\n        faIcon={faTwitter}\n        color=\"#8e9092\"\n        title=\"Twitter\"\n        size=\"2x\"\n        link=\"https://twitter.com/vishrutreddi\"\n      />\n    </SocialPanel>\n  </div>\n);\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { FormattedMessage } from 'react-intl';\n\n// Docs: https://github.com/formatjs/react-intl/blob/master/docs/Components.md#formattedmessage\nconst StyledFormattedMessage = (props) => (\n  <span className={props.className}>\n    <FormattedMessage\n      id={props.id}\n      description={props.description}\n      defaultMessage={props.defaultMessage}\n      values={props.values}\n    />\n  </span>\n);\n\nStyledFormattedMessage.propTypes = {\n  id: PropTypes.string,\n  description: PropTypes.string,\n  defaultMessage: PropTypes.string,\n  className: PropTypes.string,\n  values: PropTypes.object,\n}\n\nexport default StyledFormattedMessage;","import React from 'react';\nimport StyledFormattedMessage from '../StyledFormattedMessage/StyledFormattedMessage';\n\nimport './Splash.css';\n\nconst Splash = () => (\n  <div className=\"splash\">\n    <div className=\"splash-hello-container\">\n    <StyledFormattedMessage\n      id=\"splash.hello\"\n      defaultMessage=\"Hello\"\n      className=\"splash-hello\"\n    />\n    <div className=\"splash-secondary-container\">\n      <hr className=\"splash-hr\" />\n      <StyledFormattedMessage\n        id=\"splash.quote\"\n        defaultMessage=\"Hello\"\n        className=\"splash-quote\"\n      />\n    </div>\n    </div>\n  </div>\n);\n\nexport default Splash;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Header from './components/Header/Header';\nimport Splash from './components/Splash/Splash';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Header />\n        <Splash />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { IntlProvider } from 'react-intl';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\n// Set your locale\nconst locale = 'en-US';\n\nconst resources = require(`./assets/locales/${locale}.json`)\n\nconsole.log(\"Locale resources\", resources);\n\nReactDOM.render(\n  <IntlProvider locale={locale || 'en-US'} messages={resources} >\n    <App />\n  </IntlProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}